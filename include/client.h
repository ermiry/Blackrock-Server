#ifndef CLIENT_H   
#define CLIENT_H

#include "myTypes.h"

#include "network.h"
#include "cerver.h"
#include "client.h"

#include "utils/avl.h"

struct _Server;

// anyone that connects to the server
struct _Client {

    // 25/11/2018 - 16:00 - using connection values as the client id
    char *clientID;
    struct sockaddr_storage address;

    u8 authTries;           // remaining attemps to authenticate
    bool dropClient;        // client failed to authenticate

    // 24/11/2018 -- thinking on a kind of web sessions
    char *sessionID;            // generated by the server for each client
    // a client may need to have multiple connections at the same time...
    u8 n_active_cons;
    i32 *active_connections;   

};

typedef struct _Client Client;

extern Client *newClient (struct _Server *server, i32 clientSock, struct sockaddr_storage address,
    char *connection_values);
extern void destroyClient (void *data);

extern int client_comparator_clientID (const void *a, const void *b);
extern int client_comparator_sessionID (const void *a, const void *b);

extern void client_registerNewConnection (Client *client, i32 socket_fd);
extern void client_unregisterConnection (Client *client, i32 socket_fd);

extern char *client_getConnectionValues (i32 fd, const struct sockaddr_storage address);

extern void client_closeConnection (struct _Server *server, Client *client);

extern void client_set_sessionID (Client *client, char *sessionID);

extern Client *getClientBySocket (AVLNode *node, i32 socket_fd);
extern Client *getClientBySession (AVLTree *clients, char *sessionID);

extern void client_registerToServer (struct _Server *server, Client *client, int);
extern void client_unregisterFromServer (struct _Server *server, Client *client);

extern void client_checkTimeouts (struct _Server *server);

#endif